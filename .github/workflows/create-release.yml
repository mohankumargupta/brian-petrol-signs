name: Create Release
on: 
  workflow_dispatch:
    inputs:
      releasename:
        description: Release Version
        required: true
jobs:
  prelaunch:
    runs-on: ubuntu-latest
    steps:
      - name: Create dist directory
        run: "mkdir -p ~/dist"
      - name: Create cache for dist directory
        uses: actions/cache@v2
        with:
          path: |
            ~/dist
          key: ${{ github.run_id }}-dist
      - name: List directories
        run: "ls ~"
      - name: Create file in dist directory
        run: "touch ~/dist/README.txt"
    
  compile-pico-code:
    runs-on: ubuntu-latest
    needs: prelaunch
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2
      - name: Reuse dist directory
        uses: actions/cache@v2
        with:
          path: |
            ~/dist
          key: ${{ github.run_id }}-dist      
      - name: List files in the repository
        run: |
          ls ${{ github.workspace }}/code/pico/demo-multipanel
      - name: Compile Pico Sketch
        uses: arduino/compile-sketches@v1.0.0
        with:
          fqbn: arduino:mbed_rp2040:pico
          sketch-paths: |
            - ${{ github.workspace }}/code/pico/demo-multipanel
          cli-compile-flags: |
            - --export-binaries
          verbose: true
      - name: List files in pico source directory
        run: "ls  ${{ github.workspace }}/code/pico/demo-multipanel"
      - name: Copy final uf2 to dist directory
        run: "cp ${{ github.workspace }}/code/pico/demo-multipanel/demo-multipanel.uf2 ~/dist"
      - name: List files in dist directory
        run: "ls ~/dist"
          
  compile-d1mini-code:
    runs-on: ubuntu-latest
    needs: prelaunch
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2  
      - name: Reuse dist directory
        uses: actions/cache@v2
        with:
          path: |
            ~/dist
          key: ${{ github.run_id }}-dist         
      - name: List Contents
        run: "ls ${{ github.workspace }}/code/d1mini"
      - name: Compile D1 mini sketch
        uses: arduino/compile-sketches@v1.0.0
        with:
          fqbn: esp8266:esp8266:d1_mini
          sketch-paths: |
            - ${{ github.workspace }}/code/d1mini
          cli-compile-flags: |
            - --export-binaries            
          platforms: |
            - name: esp8266:esp8266
              source-url: https://arduino.esp8266.com/stable/package_esp8266com_index.json
          libraries: |
            - name: ESP AsyncTCP
              source-url: https://github.com/me-no-dev/ESPAsyncTCP/archive/refs/heads/master.zip
            - name: ESP Async WebServer
              source-url: https://github.com/me-no-dev/ESPAsyncWebServer/archive/refs/heads/master.zip
            - name: ArduinoJson
              source-url: https://github.com/bblanchon/ArduinoJson/archive/refs/heads/6.x.zip
          verbose: true
      - name: List files in d1mini source directory
        run: "ls  ${{ github.workspace }}/code/d1mini"    
      - name: Copy final binary to dist directory
        run: "cp ${{ github.workspace }}/code/d1mini/d1mini.bin ~/dist"      

  prepare-release:
    runs-on: ubuntu-latest
    needs: 
     - compile-pico-code
     - compile-d1mini-code
    steps:
      - name: Reuse dist directory
        uses: actions/cache@v2
        with:
          path: |
            ~/dist
          key: ${{ github.run_id }}-dist     
      - name: List files in dist directory
        run: "ls ~/dist"
